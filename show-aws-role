#!/bin/sh
#
# Show the policies attached to a role in AWS IAM.
#
# 20240307  Kimmo Suominen
#
###############################################################################
#
# Copyright (c) 2024 Kimmo Suominen
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer
#    in the documentation and/or other materials provided with the
#    distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
###############################################################################

PATH="${HOME}/bin/share:${HOME}/.local/bin"
PATH="${PATH}":/usr/local/bin:/opt/local/bin:/usr/pkg/bin:/bin:/usr/bin
export PATH

PATH="$(dirname "${0}"):${PATH}"

PROG="${0##*/}"

AWS_DEFAULT_OUTPUT=json
export AWS_DEFAULT_OUTPUT

###############################################################################

always()
{
    if ! ${quiet:-false}
    then
	echo + "${@}" 1>&2
    fi
    "${@}"
}

die()
{
    echo "${PROG}: ${@}" 1>&2
    exit 1
}

###############################################################################

json_or_yaml()
{
    case ${json:-false} in
    true)
	cat
	;;
    *)
	yq -y --indentless
	;;
    esac
}

list_attached_role_policies()
{
    always aws iam list-attached-role-policies \
	--role-name "${role_name}" \
    | jq -r '.AttachedPolicies[] | .PolicyArn'
}

list_role_policies()
{
    always aws iam list-role-policies \
	--role-name "${role_name}" \
    | jq -r '.PolicyNames[]'
}

# jq normalize code
# by Peter Koppstein (https://stackoverflow.com/users/997358/peak)
# https://stackoverflow.com/questions/38257725/how-can-i-completely-sort-arbitrary-json-using-jq
# License: https://creativecommons.org/licenses/by-sa/4.0/

normalize_policy()
{
    jq -r '
	# Apply f to composite entities recursively using keys[], and to atoms
	def sorted_walk(f):
	    . as $in
	    | if type == "object" then
		reduce keys[] as $key
		    ( {}; . + { ($key):  ($in[$key] | sorted_walk(f)) } ) | f
	    elif type == "array" then map( sorted_walk(f) ) | f
	    else f
	    end;

	def normalize:
	    sorted_walk(if type == "array" then sort else . end)
	    | .Statement |= sort_by(.Sid);

	normalize
    '
}
###############################################################################

usage()
{
    cat <<EOF
Usage:	${PROG} [-jqvy] [-p profile] role

Shows the inline and attached managed policies of a role.

Options:

    -j	Show policy in JSON format
    -p	Profile name
    -q	Do not output AWS commands (quiet; default)
    -v	Output AWS commands (verbose)
    -y	Show policy in YAML format (default)
EOF
}

###############################################################################

set -eu

json=
quiet=true

. "${HOME}/.cloud-tools.rc"

while getopts jp:qvy opt
do
    case "${opt}" in
    j)	json=true;;
    p)	export AWS_PROFILE="${OPTARG}";;
    q)	quiet=true;;
    v)	quiet=;;
    y)	json=;;
    *)	usage 1>&2; exit 1;;
    esac
done
shift $((${OPTIND} - 1))

if [ ${#} -ne 1 ]
then
    usage 2>&1
    exit 2
fi

umask 077

WRKDIR=$(mktemp -dt ${0##*/}.XXXXX) || exit 1
trap "rm -rf '${WRKDIR}'" 0 1 3 15

{
    role_name="${1}"

    always aws iam get-role \
	--role-name "${role_name}" \
	> "${WRKDIR}/role-metadata.json"

    jq .Role.AssumeRolePolicyDocument \
    < "${WRKDIR}/role-metadata.json" \
    | normalize_policy \
    | json_or_yaml \
    | sed '
	1i\
#\
# Assume role policy\
#
      '

    for name in $(list_role_policies)
    do
	always iam get-role-policy \
	    --role-name "${role_name}" \
	    --policy-name "${name}" \
	| jq .PolicyDocument \
	| json_or_yaml \
	| sed '
	    1i\
#\
# Inline policy: '"${name}"'\
#
	  '
    done

    for arn in $(list_attached_role_policies)
    do
	always show-aws-policy ${quiet:+-q} ${json:+-j} "${arn}" \
	| sed '
	    1i\
#\
# '"${arn}"'\
#
	  '
    done
} \
| if [ -t 1 ]
then
    "${PAGER:-less}"
else
    cat
fi
